{"name": "test_all_high_risk_scenarios[Ctier_LowSeverity]", "status": "failed", "statusDetails": {"message": "AssertionError: One or more DeepEval metrics failed. Check attached report details.\nassert True is False", "trace": "azure_model = <src.test_azure.AzureOpenAIModel object at 0x00000165D570B620>\nscenario_data = {'expected_output_prompt': 'The output should mention the C tier Credit Score but other risk factors should be low sev...: 'high_risk/case_01/input.json', 'output_file': 'high_risk/case_01/output.json', 'scenario_name': 'Ctier_LowSeverity'}\n\n    @pytest.mark.parametrize(\n        \"scenario_data\",\n        # CRITICAL: Call the fixture function (high_risk_scenarios()) to get the list of data\n        HIGH_RISK_DATA,\n        # Use the scenario_name for clear output in the test report\n        ids=[s[\"scenario_name\"] for s in HIGH_RISK_DATA]\n    )\n    def test_all_high_risk_scenarios(azure_model, scenario_data):\n    \n    \n        #Define G-Eval Metrics\n        Hallucination = GEval(\n            name=\"Output Hallucination\",\n            evaluation_steps=[\n            \"1. Ignore and do not penalise any mention of the absence or unavailability of a credit report or any uses of it in the reasonings or any flags as a critical issue as this is an expected mistake of the model. Any further consequences of this missing credit report that are highlighted should also not be penalised.\",\n            \"2. Read the 'actual output' and compare the findings to what is in the 'input'\",\n            \"3. Assess if the 'actual output' is faithful. Mention any hallucinations or if anything has been made up except for the missing credit report\",\n            \"4. Do not judge the 'actual_output' based on how well it follows the steps in the 'retrieval context'. The only thing you should judge is if any hallucinations are present except for the missing credit report\",\n            \"5. Once again, IGNORE and DO NOT penalise any mention of the absence or unavailability of a credit report or any uses of it in the reasonings\",\n            \"6. IGNORE AND DO NOT PENALISE any flags of a missing credit report as a critical issue as this is an expected mistake of the model. Any further consequences of this missing credit report that are highlighted should also not be penalised.\",\n            \"7. Assign a final score from 0.0 to 1.0 based on the combined assessment of steps 1, 2, 3, and 4. **ENSURE the penalty for the continued mention and analysis based on a missing credit report (Step 1, 5 and 6) is 0.0.**\",\n            \"8. Present findings in basic, easy to understand English\"\n    \n    \n    \n        ],\n            evaluation_params=[LLMTestCaseParams.ACTUAL_OUTPUT, LLMTestCaseParams.INPUT, LLMTestCaseParams.RETRIEVAL_CONTEXT, LLMTestCaseParams.EXPECTED_OUTPUT],\n            model=azure_model,\n            threshold=0.5\n        )\n    \n        Correctness = GEval(\n            name=\"Correctness Evaluation\",\n            evaluation_steps=[\n            \"1. Ignore and do not penalise any mention of the absence or unavailability of a credit report or any uses of it in the reasonings or any flags as a critical issue as this is an expected mistake of the model. Any further consequences of this missing credit report that are highlighted should also not be penalised.\",\n            \"2. Read the 'actual output' and compare the findings to what is mentioned in the 'expected output'\",\n            \"3. Assess if the 'actual output' is faithful. Mention any hallucinations or if anything has been made up except for the missing credit report\",\n            \"4. Assign a final score from 0.0 to 1.0 based on the combined assessment of steps 1, 2, and 3. **ENSURE the penalty for the continued mention and analysis based on a missing credit report is 0.0.**\",\n            \"5. Present findings in basic, easy to understand English\"\n    \n    \n    \n        ],\n            evaluation_params=[LLMTestCaseParams.ACTUAL_OUTPUT, LLMTestCaseParams.INPUT, LLMTestCaseParams.RETRIEVAL_CONTEXT, LLMTestCaseParams.EXPECTED_OUTPUT],\n            model=azure_model,\n            threshold=0.5\n        )\n    \n    \n        test_case = create_deepeval_test_case(scenario_data)\n    \n        metrics_to_run = [\n            Hallucination,\n            Correctness\n        ]\n    \n    \n        #ALLURE REPORTING\n         # --- 2. RUN METRICS INDIVIDUALLY AND COLLECT RESULTS ---\n        # We will use a dictionary to store results and track failure states\n        results = {}\n        test_failed = False\n    \n        # Use a try/except structure for each metric to prevent the entire test from exiting\n        # prematurely before other metric scores are calculated/logged.\n        for metric in metrics_to_run:\n            try:\n                # Calculate the score and reason *without* using assert_test yet\n                metric.measure(test_case)\n    \n                results[metric.name] = {\n                    \"score\": metric.score,\n                    \"reason\": metric.reason,\n                    \"status\": \"PASS\" if metric.is_successful() else \"FAIL\"\n                }\n                if not metric.is_successful():\n                    test_failed = True\n    \n            except Exception as e:\n                # Handle unexpected errors during metric evaluation (e.g., LLM server error)\n                results[metric.name] = {\n                    \"score\": 0.0,\n                    \"reason\": f\"Evaluation Error: {e}\",\n                    \"status\": \"ERROR\"\n                }\n                test_failed = True\n    \n        # --- 3. LOG ALL RESULTS TO ALLURE ---\n        #log input\n        allure.attach(\n            test_case.input,\n            name=f\"Input Data: {scenario_data['scenario_name']}\", # <-- Unique name defined once\n            attachment_type=allure.attachment_type.JSON\n        )\n        #log output\n        with allure.step(f\"Evaluate Scenario: {scenario_data['scenario_name']}\"):\n            allure.attach(test_case.actual_output, name=\"AI Raw JSON Output\", attachment_type=allure.attachment_type.JSON)\n    \n            for name, data in results.items():\n                allure.attach(\n                    f\"Score: {data['score']:.4f}\\nStatus: {data['status']}\\nReasoning: {data['reason']}\",\n                    name=f\"{name} ({data['status']})\",\n                    attachment_type=allure.attachment_type.TEXT\n                )\n    \n        # --- 4. FINAL ASSERTION ---\n        # This single, final assertion controls the overall test status in Pytest/Allure.\n>       assert test_failed is False, \"One or more DeepEval metrics failed. Check attached report details.\"\nE       AssertionError: One or more DeepEval metrics failed. Check attached report details.\nE       assert True is False\n\ntests\\test_high_risk.py:126: AssertionError"}, "steps": [{"name": "Evaluate Scenario: Ctier_LowSeverity", "status": "passed", "attachments": [{"name": "AI Raw JSON Output", "source": "c4ca839e-bf3a-4c83-8c4c-4b4b90994c80-attachment.json", "type": "application/json"}, {"name": "Output Hallucination (FAIL)", "source": "9c6d22a9-b4d4-42e5-b1d3-098e6e055335-attachment.txt", "type": "text/plain"}, {"name": "Correctness Evaluation (PASS)", "source": "d5204324-20ee-42a1-a499-d58ba6d1b515-attachment.txt", "type": "text/plain"}], "start": 1761907171916, "stop": 1761907171918}], "attachments": [{"name": "Input Data: Ctier_LowSeverity", "source": "6a223824-6b71-4aae-9bd3-8533f8f920fe-attachment.json", "type": "application/json"}], "parameters": [{"name": "scenario_data", "value": "{'scenario_name': 'Ctier_LowSeverity', 'input_file': 'high_risk/case_01/input.json', 'output_file': 'high_risk/case_01/output.json', 'expected_output_prompt': 'The output should mention the C tier Credit Score but other risk factors should be low severity.'}"}], "start": 1761907141940, "stop": 1761907171919, "uuid": "3d90355b-c814-4d65-9979-fcbb40e962a2", "historyId": "cb7071443518d2d506813914e084e866", "testCaseId": "c29f452af9ba33602af796b72d7e0d5f", "fullName": "tests.test_high_risk#test_all_high_risk_scenarios", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_high_risk"}, {"name": "host", "value": "LAPTOP-GT42QV3"}, {"name": "thread", "value": "13444-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_high_risk"}], "titlePath": ["tests", "test_high_risk.py"]}